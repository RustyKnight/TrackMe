//
//  TrackMe.swift
//  TrackMe
//
//  Created by KaiZen Enterprises on 11/6/17.
//  Copyright Â© 2017 KaiZen Enterprises. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class TrackMe : NSObject {

    //// Drawing Methods

    public dynamic class func drawCompass(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), fillColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), accuracyStrokeColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000), accuracyFrom: CGFloat = 100, accuracyTo: CGFloat = 80) {
        //// General Declarations
        // This non-generic function dramatically improves compilation times of complex expressions.
        func fastFloor(_ x: CGFloat) -> CGFloat { return floor(x) }


        //// Subframes
        let group: CGRect = CGRect(x: frame.minX + 2, y: frame.minY + 2, width: fastFloor((frame.width - 2) * 0.99371 + 0.5), height: fastFloor((frame.height - 2) * 0.99371 + 0.5))


        //// Group
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5)))
        fillColor.setFill()
        ovalPath.fill()
        UIColor.white.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Accuracy Drawing
        let accuracyRect = CGRect(x: group.minX + fastFloor(group.width * 0.00000 + 0.5), y: group.minY + fastFloor(group.height * 0.00000 + 0.5), width: fastFloor(group.width * 1.00000 + 0.5) - fastFloor(group.width * 0.00000 + 0.5), height: fastFloor(group.height * 1.00000 + 0.5) - fastFloor(group.height * 0.00000 + 0.5))
        let accuracyPath = UIBezierPath()
        accuracyPath.addArc(withCenter: CGPoint(x: accuracyRect.midX, y: accuracyRect.midY), radius: accuracyRect.width / 2, startAngle: -accuracyFrom * CGFloat.pi/180, endAngle: -accuracyTo * CGFloat.pi/180, clockwise: true)

        accuracyStrokeColor.setStroke()
        accuracyPath.lineWidth = 4
        accuracyPath.lineCapStyle = .round
        accuracyPath.lineJoinStyle = .round
        accuracyPath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.00158 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.46835 * group.width, y: group.minY + 0.06487 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.53165 * group.width, y: group.minY + 0.06487 * group.height))
        bezierPath.addLine(to: CGPoint(x: group.minX + 0.50000 * group.width, y: group.minY + 0.00158 * group.height))
        bezierPath.close()
        UIColor.white.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }

    //// Generated Images

    public dynamic class func imageOfCompass(imageSize: CGSize = CGSize(width: 320, height: 320), fillColor: UIColor = UIColor(red: 0.800, green: 0.320, blue: 0.320, alpha: 1.000), accuracyStrokeColor: UIColor = UIColor(red: 1.000, green: 0.000, blue: 0.000, alpha: 1.000), accuracyFrom: CGFloat = 100, accuracyTo: CGFloat = 80) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(imageSize, false, 0)
            TrackMe.drawCompass(frame: CGRect(x: 0, y: 0, width: imageSize.width, height: imageSize.height), fillColor: fillColor, accuracyStrokeColor: accuracyStrokeColor, accuracyFrom: accuracyFrom, accuracyTo: accuracyTo)

        let imageOfCompass = UIGraphicsGetImageFromCurrentImageContext()!.resizableImage(withCapInsets: UIEdgeInsets.zero, resizingMode: .tile)
        UIGraphicsEndImageContext()

        return imageOfCompass
    }

}
